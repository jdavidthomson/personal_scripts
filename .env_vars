export DEVELOPMENT_SCRIPTS="scripts"

export STANDARD_DOCKERFILE_FILENAME="Dockerfile"

export DOCKER_DIR="docker"
export DOCKERFILES_DIR="docker_files"

export DEVELOPMENT_ROOT_PATH=$(pwd)
export DEVELOPMENT_SCRIPTS_PATH=$DEVELOPMENT_ROOT_PATH/$DEVELOPMENT_SCRIPTS

export DEVELOPMENT_DOCKER_PATH=$DEVELOPMENT_ROOT_PATH/$DOCKER_DIR
export DEVELOPMENT_DOCKERFILES_PATH=$DEVELOPMENT_DOCKER_PATH/$DOCKERFILES_DIR

export DEV_DIR="dev_images"

export DOCKER_DEV_IMAGES_PATH=$DEVELOPMENT_DOCKERFILES_PATH/$DEV_DIR

export _OLD_PATH_BEFORE_DEVELOPMENT=$PATH
export PATH=$DEVELOPMENT_SCRIPTS_PATH:$PATH


####################################
# use this flag to ensure that the base repo to work with during development is correct
####################################
export DOCKER_DEV_REPO="base_images"

####################################
# use this flag to control the scratchapd suffix name 
####################################
export ENV_SCRATCHPAD_NAME="scratchpad"

_DT-DEV_new_docker_image ()   #  By convention, the function name
{                 #+ starts with an underscore.
  local cur
  COMPREPLY=()

  DOCKERFILE="Dockerfile"
  TRAILING_SLASH="/"

  IFS=$'\n'
  for filename in $(find $DEVELOPMENT_DOCKERFILES_PATH -name $DOCKERFILE); do
    filename_length=${#filename}
    substring_length=$(expr ${#DOCKERFILE} + ${#TRAILING_SLASH})
    filename=$(echo $filename|rev)
    filename=${filename:$substring_length}
    filename=$(echo $filename|rev)
    image_path_length_to_remove=$(expr ${#DEVELOPMENT_DOCKERFILES_PATH} + ${#TRAILING_SLASH})
    image_name=${filename:${#DEVELOPMENT_DOCKERFILES_PATH}}
    COMPREPLY+=($image_name)
  done
  unset IFS

  cur=${COMP_WORDS[COMP_CWORD]}

  return 0
}
complete -F _DT-DEV_new_docker_image build_new_image.sh
